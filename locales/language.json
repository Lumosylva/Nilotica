{
    "语言设置为: {}, 翻译器已为当前线程加载。路径: {}": "Language set to: {}, translator loaded for current thread. Path: {}",
    "未找到语言 '{}' 的翻译文件 (messages.mo)，将使用原文。检查 messages.mo 路径: {}": "No translation file (messages.mo) found for language '{}', original text will be used. Check messages.mo path: {}",
    "加载语言 '{}' 时发生错误: {}": "An error occurred while loading language '{}': {}",
    "多": "Long",
    "空": "Short",
    "净": "Net",
    "开": "Open",
    "平": "Close",
    "平今": "Close Today",
    "平昨": "Close Yesterday",
    "提交中": "Submitting",
    "未成交": "Unsold",
    "部分成交": "Partially Sold",
    "全部成交": "All Sold",
    "已撤销": "Revoked",
    "拒单": "Rejection",
    "股票": "Stock",
    "期货": "Futures",
    "期权": "Options",
    "指数": "Index",
    "外汇": "Foreign Exchange",
    "现货": "Spot Goods",
    "债券": "Bonds",
    "权证": "Warrants",
    "价差": "Spread",
    "基金": "Fund",
    "互换": "Exchange",
    "限价": "Limit Price",
    "市价": "Market Price",
    "询价": "Request Quote",
    "看涨期权": "Call Option",
    "看跌期权": "Put Option",
    "找不到数据库驱动{}，使用默认的SQLite数据库": "Unable to find database driver {}, using default SQLite database",
    "查询K线数据失败：没有正确配置数据服务": "Failed to query K-line data: Data service is not configured correctly",
    "查询Tick数据失败：没有正确配置数据服务": "Failed to query Tick data: Data service is not configured correctly",
    "没有配置要使用的数据服务，请修改全局配置中的datafeed相关内容": "The data service to be used is not configured. Please modify the datafeed related content in the global configuration",
    "无法加载数据服务模块，请运行 pip install {} 尝试安装": "Unable to load data service module, please run pip install {} to try to install",
    "找不到底层接口：{}": "Unable to find underlying interface: {}",
    "找不到引擎：{}": "Engine not found: {}",
    "邮件发送失败: {}": "Email sending failed: {}",
    "固定参数添加成功": "Fixed parameters added successfully",
    "参数优化起始点必须小于终止点": "The starting point of parameter optimization must be smaller than the ending point",
    "参数优化步进必须大于0": "The parameter optimization step must be greater than 0",
    "范围参数添加成功，数量{}": "Range parameter added successfully, quantity {}",
    "优化参数组合为空，请检查": "The optimization parameter combination is empty, please check",
    "优化目标未设置，请检查": "The optimization target is not set, please check",
    "开始执行穷举算法优化": "Start exhaustive algorithm optimization",
    "参数优化空间：{}": "Parameter optimization space: {}",
    "穷举算法优化完成，耗时{}秒": "Exhaustive algorithm optimization completed, took {} seconds",
    "开始执行遗传算法优化": "Start genetic algorithm optimization",
    "每代族群总数：{}": "Total number of populations per generation: {}",
    "优良筛选个数：{}": "Number of good screenings: {}",
    "迭代次数：{}": "Iterations: {}",
    "交叉概率：{:.0%}": "Crossover probability: {:.0%}",
    "突变概率：{:.0%}": "Mutation probability: {:.0%}",
    "遗传算法优化完成，耗时{}秒": "Genetic algorithm optimization completed, took {} seconds",
    "合成日K线必须传入每日收盘时间": "The synthetic daily K-line must be passed in the daily closing time",
    "未指定 --ctp-env，使用默认 CTP 环境：{}": "No --ctp-env specified, using default CTP environment: {}",
    "使用配置环境：'{}'": "Using configuration environment: '{}'",
    "未指定 --config-env，仅使用基本 global_config.yaml。": "No --config-env specified, using base global_config.yaml only.",
    "命令行覆盖的语言：{}": "Language overridden by command line: {}",
    "使用配置中的语言（或默认）：{}": "Using language from configuration (or default): {}",
    "正在为 CTP 环境初始化市场数据网关服务（RPC 模式）：[{}]...": "Initializing market data gateway service (RPC mode) for CTP environment: [{}]...",
    "尝试为 CTP 环境启动服务（RPC 模式）：[{}]...": "Attempting to start service (RPC mode) for CTP env: [{}]...",
    "CTP 环境 [{}] 的市场数据网关服务正在运行。按 Ctrl+C 停止。": "Market data gateway service for CTP env: [{}] is running. Press Ctrl+C to stop.",
    "检测到 Ctrl+C，正在停止服务 (CTP 环境：[{}])...": "Ctrl+C detected, stopping service (CTP env: [{}])...",
    "服务运行时错误（CTP 环境：[{}]）：{}": "Service runtime error (CTP env: [{}]): {}",
    "开始停止 CTP 环境的服务（RPC 模式）：[{}]...": "Starting to stop service (RPC mode) for CTP env: [{}]...",
    "CTP 环境 [{}] 的市场数据网关服务 (RPC 模式) 已退出。": "Market data gateway service (RPC mode) for CTP env: [{}] has exited.",
    "使用提供的 ConfigManager 为环境 [{}] 初始化 MarketDataGatewayService。": "Initializing MarketDataGatewayService for environment: [{}] using provided ConfigManager.",
    "已为环境加载 CTP 设置：[{}]": "Loaded CTP settings for environment: [{}]",
    "在 connect_ctp.json 中未找到环境 '{}'！无法连接 CTP。": "Environment '{}' not found in connect_ctp.json! Cannot connect CTP.",
    "未找到 connect_ctp.json！无法连接 CTP。": "connect_ctp.json not found! Cannot connect CTP.",
    "行情网关服务 for [{}] 初始化完成.": "The market gateway service for [{}] has been initialized.",
    "发布Tick: {} - Price: {}": "Release Tick: {} - Price: {}",
    "发布 Tick 失败 (主题: {})": "Failed to publish Tick (subject: {})",
    "检测到 CTP 行情登录成功信号！": "CTP market login success signal detected!",
    "发布 Log 失败 (主题: {})": "Failed to publish log (topic: {})",
    "发布 Contract 失败 (主题: {})": "Failed to publish Contract (Subject: {})",
    "行情发布地址 'zmq_addresses.market_data_pub' 未在配置中找到，无法启动.": "The market data publishing address 'zmq_addresses.market_data_pub' was not found in the configuration and could not be started.",
    "无法启动 ZmqPublisherBase (绑定到 {})，行情网关启动中止.": "Unable to start ZmqPublisherBase (bound to {}), market gateway startup aborted.",
    "行情网关服务 for [{}] 正在启动...": "Market Gateway Service for [{}] is starting...",
    "事件引擎已启动.": "The event engine has been started.",
    "连接 CTP 网关 for [{}]...": "Connect CTP Gateway for [{}]...",
    "CTP 设置未加载或环境无效，无法连接 CTP 网关。": "CTP settings not loaded or environment invalid, cannot connect CTP gateway.",
    "CTP 网关连接请求已发送。等待连接成功信号 (超时: {}s)...": "CTP gateway connection request has been sent. Waiting for connection success signal (timeout: {}s)...",
    "CTP 行情连接超时 ({}s)！未收到登录成功信号.": "CTP market connection timed out ({}s)! No login success signal received.",
    "CTP 行情网关连接成功.": "CTP market gateway connection is successful.",
    "订阅行情...": "Subscribe to Quotes...",
    "'default_subscribe_symbols' 未在配置中找到或为空，不订阅任何合约.": "'default_subscribe_symbols' 未在配置中找到或为空，不订阅任何合约.",
    "发送订阅请求: {}": "Send subscription request: {}",
    "错误的合约格式，跳过订阅: {} (应为 SYMBOL.EXCHANGE)": "Wrong contract format, skipping subscription: {} (should be SYMBOL.EXCHANGE)",
    "共发送 {} 个合约的订阅请求.": "A total of {} contracts' subscription requests were sent.",
    "以下合约订阅失败或跳过: {}": "The following contract subscriptions failed or were skipped: {}",
    "行情网关服务 for [{}] 启动流程完成.": "The market gateway service for [{}] startup process is completed.",
    "停止行情网关服务 for [{}]...": "Stop the market gateway service for [{}]...",
    "事件引擎已停止.": "The event engine has stopped.",
    "CTP 网关已关闭.": "The CTP gateway is down.",
    "[VNPY 日志 - MDGW 已处理] {} - {}": "[VNPY LOG - MDGW Processed] {} - {}",
    "加载或解析 connect_ctp.json 时出错：{}": "Error loading or parsing connect_ctp.json: {}",
    "CTP 连接配置 (Env: {}): UserID={}, BrokerID={}, MD={}": "CTP connection configuration (Env: {}): UserID={}, BrokerID={}, MD={}",
    "订阅 {} 时出错: {}": "Error subscribing to {}: {}",
    "连接或订阅 CTP 网关时发生严重错误 (Env: {}): {}": "A critical error occurred while connecting or subscribing to the CTP Gateway (Env: {}): {}",
    "停止事件引擎时出错: {}": "Error stopping event engine: {}",
    "关闭 CTP 网关时出错: {}": "Error shutting down CTP Gateway: {}",
    "{} 已在运行中。": "{} is already running.",
    "正在启动 {}...": "Starting {}...",
    "{} 已启动，PUB socket 绑定到 {}": "{} started, PUB socket bound to {}",
    "{} 启动失败 (绑定 PUB socket 到 {} 时出错): {}": "{} failed to start (error binding PUB socket to {}): {}",
    "关闭 ZMQ PUB socket 时: {}": "When closing a ZMQ PUB socket: {}",
    "{} 启动时发生未知错误: {}": "{} An unknown error occurred during startup: {}",
    "{} 未运行。": "{} is not running.",
    "正在停止 {}...": "Stopping {}...",
    "ZMQ PUB socket 已关闭。": "The ZMQ PUB socket has been closed.",
    "关闭 ZMQ PUB socket 时出错: {}": "Error closing ZMQ PUB socket: {}",
    "ZMQ Context 已终止。": "The ZMQ Context has terminated.",
    "终止 ZMQ Context 时出错: {}": "Error terminating ZMQ Context: {}",
    "{} 已停止。": "{} has stopped.",
    "发布失败：{} 未激活或 PUB socket 不可用。 Topic: {}": "Publishing failed: {} is not activated or the PUB socket is unavailable. Topic: {}",
    "发布取消：在获取锁后发现服务已停止。Topic: {}": "Post Canceled: Found the service stopped after acquiring the lock. Topic: {}",
    "[PUB Tick Send] Attempting send_multipart for Topic: {}": "[PUB Tick Send] Attempting send_multipart for Topic: {}",
    "[PUB Tick Send] send_multipart call completed for Topic: {}": "[PUB Tick Send] send_multipart call completed for Topic: {}",
    "Msgpack 序列化错误 (发布数据, 主题: {}): {}": "Msgpack serialization error (post data, subject: {}): {}",
    "原始对象类型: {}": "Original object type: {}",
    "转换后对象类型: {}": "Converted object type: {}",
    "记录对象细节时出错: {}": "Error logging object details: {}",
    "发布事件时 ZMQ 缓冲区可能已满 (EAGAIN). Topic: {}": "The ZMQ buffer may be full (EAGAIN) when publishing events. Topic: {}",
    "发布事件时 ZMQ 错误: {}. Topic: {}": "ZMQ error when publishing event: {}. Topic: {}",
    "发布事件时发生未知错误 (主题: {}): {}": "An unknown error occurred while publishing an event (subject: {}): {}",
    "未找到配置文件：{}": "Configuration file not found: {}",
    "已成功从 {} 加载 YAML 配置": "Successfully loaded YAML configuration from: {}",
    "无法解析 YAML 文件 {}: {}": "Failed to parse YAML file {}: {}",
    "无法读取文件 {}: {}": "Failed to read file {}: {}",
    "未找到可选的 JSON 配置文件：{}": "Optional JSON configuration file not found: {}",
    "已成功从 {} 加载 JSON 配置": "Successfully loaded JSON configuration from: {}",
    "无法解析 JSON 文件 {}: {}": "Failed to parse JSON file {}: {}",
    "项目根目录确定为: {}": "The project root directory is determined as: {}",
    "基本全局配置 ({}) 加载失败或为空。": "The base global configuration ({}) failed to load or is empty.",
    "尝试从以下位置加载环境 '{}' 的配置: {}": "Trying to load configuration for environment '{}' from: {}",
    "环境配置文件 ({}) 未找到或为空。如果有任何被覆盖的键，将使用基本配置值。": "The environment configuration file ({}) was not found or is empty. If any keys are overridden, the base configuration values will be used.",
    "未指定环境，仅使用基本配置。": "No environment is specified, only the basic configuration is used.",
    "将环境配置 ('{}') 合并到基本配置中。": "Merge environment configuration ('{}') into the base configuration.",
    "全局配置已成功验证并加载到 Pydantic 模型中。": "The global configuration is successfully validated and loaded into the Pydantic model.",
    "全局配置验证失败！错误: {}": "Global configuration validation failed! Error: {}",
    "关键配置错误。中止程序启动。": "Critical configuration error. Aborting program startup.",
    "配置验证失败。查看日志了解详情。": "Configuration validation failed. Check the logs for details.",
    "在全局配置的 Pydantic 模型实例化过程中发生意外错误: {}": "An unexpected error occurred during instantiation of a globally configured Pydantic model: {}",
    "全局配置处理过程中发生关键错误。中止程序启动。": "A critical error occurred during global configuration processing. Aborting program startup.",
    "全局配置处理过程中发生意外错误。": "An unexpected error occurred during global configuration processing.",
    "合并的全局配置数据为空。未执行 Pydantic 验证。": "The merged global configuration data is empty. No Pydantic validation is performed.",
    "全局 Pydantic 模型已重新验证并更新了已解析的绝对路径。": "Global Pydantic models have been revalidated and updated with resolved absolute paths.",
    "路径解析后重新验证全局配置模型时出错: {}。可能无法通过 Pydantic 模型访问已解析的路径。": "Error revalidating global config model after path resolution: {}. Resolved paths may not be accessible via Pydantic models.",
    "尝试从配置的路径加载策略配置: {}": "Try loading strategy configuration from the configured path: {}",
    "在 '{}' 指定的策略配置文件未找到或为空。": "The strategy configuration file specified in '{}' was not found or is empty.",
    "未从特定配置路径加载策略，或路径未设置。尝试默认用户位置 '{}'...": "Strategy was not loaded from the specified configuration path, or the path was not set. Trying the default user location '{}'...",
    "策略配置已成功验证并加载。": "The strategy configuration was successfully validated and loaded.",
    "策略配置验证失败！错误: {}": "Strategy configuration validation failed! Error: {}",
    "由于验证错误，使用未验证的原始策略数据。行为可能不可预测。": "Due to validation errors, unvalidated raw strategy data is used. Behavior may be unpredictable.",
    "在策略配置的 Pydantic 模型实例化过程中发生意外错误: {}": "An unexpected error occurred during instantiation of the Pydantic model for the strategy configuration: {}",
    "未找到策略配置文件或为空（已检查特定路径和默认路径）。未加载任何策略。": "The strategy configuration file was not found or was empty (both specific and default paths were checked). No strategy was loaded.",
    "配置中缺少 'paths' 部分或不是字典。无法解析路径。": "The 'paths' section in the configuration is missing or is not a dictionary. Unable to resolve paths.",
    "已解析 '{}': {} -> {}": "Parsed '{}': {} -> {}",
    "'backtest_data_source_path' 默认为 'data_recording_path_abs': {}": "'backtest_data_source_path' defaults to 'data_recording_path_abs': {}",
    "配置数据（类型: {}）既不是 Pydantic 模型也不是字典。无法获取键 '{}'。": "Configuration data (type: {}) is neither a Pydantic model nor a dictionary. Cannot get key '{}'.",
    "访问键 '{}' 时出错。返回默认值：{}": "Error accessing key '{}'. Returning default value: {}",
    "无法获取所有全局配置：_config_data 不是 Pydantic 模型或字典。": "Unable to fetch all global configuration: _config_data is not a Pydantic model or dictionary.",
    "错误：产品信息文件未找到 {}": "Error: Product information file not found {}",
    "错误：读取产品信息文件 {} 时出错：{}": "Error: Error reading product information file {}: {}",
    "警告：文件 {} 中的 [{}] 缺少 'multiplier'，跳过此合约。": "Warning: Missing 'multiplier' in [{}] of file {}, skipping this contract.",
    "警告：解析文件 {} 中 [{}] 的数值时出错: {}，跳过此合约。": "Warning: Error parsing value of [{}] in file {}: {}, skipping this contract.",
    "警告：处理文件 {} 中 [{}] 时发生未知错误: {}，跳过此合约。": "WARNING: An unknown error occurred while processing [{}] in file {}: {}, skipping this contract.",
    "从 {} 加载了 {} 个合约的乘数和 {} 个合约的手续费规则。": "Loaded multipliers for {} contracts and fee rules for {} contracts from {}.",
    "无法转换列表/元组中的项目，使用字符串表示。": "Unable to convert items in list/tuple to string representation.",
    "警告：convert_order_data_to_dict 中未处理的类型: {}。转换为字符串。": "Warning: Unhandled type: {} in convert_order_data_to_dict. Converting to string.",
    "创建 OrderRequest 失败：缺少关键字段：{} from data {}": "Failed to create OrderRequest: Missing key field: {} from data {}",
    "创建 OrderRequest 失败：无效的枚举值：{} from data {}": "Failed to create OrderRequest: Invalid enum value: {} from data {}",
    "创建 OrderRequest 时发生未知错误：{} from data {}": "An unknown error occurred while creating OrderRequest: {} from data {}",
    "错误：未能从配置中获取 zmq_addresses.order_gateway_rep 或 zmq_addresses.order_gateway_pub。请检查配置。": "ERROR: Could not get zmq_addresses.order_gateway_rep or zmq_addresses.order_gateway_pub from config. Please check config.",
    "订单网关 ZMQ 地址已加载: REP='{}', PUB='{}'": "Order gateway ZMQ address loaded: REP='{}', PUB='{}'",
    "正在初始化订单执行网关服务(RPC模式) for CTP environment: [{}]...": "Initializing order execution gateway service (RPC mode) for CTP environment: [{}]...",
    "尝试启动服务(RPC模式) for CTP env: [{}]...": "Try to start the service (RPC mode) for CTP env: [{}]...",
    "订单执行网关 for CTP env: [{}] 正在运行。按 Ctrl+C 停止。": "Order Execution Gateway for CTP env: [{}] is running. Press Ctrl+C to stop.",
    "检测到 Ctrl+C，正在停止服务 (CTP env: [{}])...": "Ctrl+C detected, stopping service (CTP env: [{}])...",
    "服务运行时发生意外错误 (CTP env: [{}]): {}": "An unexpected error occurred while the service was running (CTP env: [{}]): {}",
    "开始停止服务(RPC模式) for CTP env: [{}]...": "Start and stop service (RPC mode) for CTP env: [{}]...",
    "订单执行网关服务(RPC模式) for CTP env: [{}] 已退出。": "Order Execution Gateway Service (RPC Mode) for CTP env: [{}] Exited.",
    "正在初始化 OrderExecutionGatewayService for environment: [{}] using provided ConfigManager.": "正在初始化 OrderExecutionGatewayService for environment: [{}] using provided ConfigManager.",
    "已加载环境 [{}] 的 CTP 设置": "Loaded CTP settings for environment [{}]",
    "加载或解析 connect_ctp.json 时出错: {}": "Error loading or parsing connect_ctp.json: {}",
    "尝试从 {} 加载产品信息...": "Trying to load product information from {}...",
    "警告：未能成功加载手续费规则或合约乘数，手续费计算可能不准确！": "Warning: Failed to load the fee rules or contract multiplier, fee calculation may be inaccurate!",
    "订单执行网关服务(RPC模式) for [{}] 初始化完成。": "Order execution gateway service (RPC mode) for [{}] initialization completed.",
    "RPC: 收到 send_order 请求: {}": "RPC: Received send_order request: {}",
    "RPC: send_order - 无法将请求转换为 OrderRequest。": "RPC: send_order - Unable to convert request to an OrderRequest.",
    "RPC: send_order - 订单已发送至 CTP: {}, VT_OrderID: {}": "RPC: send_order - Order sent to CTP: {}, VT_OrderID: {}",
    "RPC: send_order - CTP 网关未能发送订单 (gateway.send_order 返回 None): {}": "RPC: send_order - CTP gateway failed to send order (gateway.send_order returned None): {}",
    "对于 {}，gateway.send_order 返回 None": "gateway.send_order returned None for {}",
    "RPC: send_order - 发送订单时 CTP 网关出错: {}": "RPC: send_order - CTP Gateway error while sending order: {}",
    "send_order 异常：{}": "send_order exception: {}",
    "RPC: 收到 cancel_order 请求 for {}": "RPC: Received cancel_order request for {}",
    "RPC: cancel_order - 收到无效的撤单指令：缺少 'vt_orderid' 字段。": "RPC: cancel_order - Invalid cancel order instruction received: missing 'vt_orderid' field.",
    "RPC: cancel_order - 尝试撤销失败：在内部缓存中未找到活动订单 {} (可能已完成或不存在)": "RPC: cancel_order - attempt to cancel failed: no active order {} found in internal cache (may have been completed or does not exist)",
    "RPC: cancel_order - 撤单请求已发送 for {}": "RPC: cancel_order - Cancel order request sent for {}",
    "RPC: cancel_order - 处理撤单指令时出错 (vt_orderid: {}): {}": "RPC: cancel_order - Error processing cancel order (vt_orderid: {}): {}",
    "RPC: 收到 query_contracts 请求": "RPC: Received query_contracts request",
    "RPC: 收到 query_account 请求": "RPC: Received query_account request",
    "无法尝试 CTP 重连：未存储 CTP 配置。": "Unable to attempt CTP reconnect: CTP configuration not stored.",
    "CTP 重连请求过于频繁，已跳过。上次尝试在 {} 秒内。原因: {}": "CTP reconnect request too frequent, skipped. Last attempt within {} seconds. Reason: {}",
    "检测到 CTP 连接问题 (原因: {})，尝试重新连接 CTP...": "CTP connection problem detected (reason: {}), trying to reconnect CTP...",
    "无法重连 CTP：网关对象不存在。": "Unable to reconnect CTP: Gateway object does not exist.",
    "调用 self.gateway.connect 使用已存储的配置进行 CTP 重连...": "Call self.gateway.connect to reconnect using the stored configuration...",
    "CTP 重新连接请求已发送。请监控后续日志确认连接状态。": "CTP reconnect request has been sent. Please monitor subsequent logs to confirm the connection status.",
    "尝试 CTP 重新连接时发生错误: {}": "An error occurred while trying to reconnect to CTP: {}",
    "事件处理器: 过滤掉的事件类型: {} (总事件计数: {})": "Event handler: Filtered event types: {} (Total event count: {})",
    "订单 {} 状态变为非活动 ({}), 已从 active_order_ids 移除。": "Order {} status changed to inactive ({}), removed from active_order_ids.",
    "订单状态更新: [{}] VTOrderID={}, 状态={}, 已成交={}/{}, 价格={}, 代码={}, 方向={}, 开平={}": "Order status update: [{}] VTOrderID={}, status={}, filled={}/{}, price={}, code={}, direction={}, open={}",
    "收到 EVENT_TRADE: VTOrderID={}, Symbol={}": "Receive EVENT_TRADE: VTOrderID={}, Symbol={}",
    "账户资金更新 (每5分钟): AccountID={}, Balance={:.2f}, Available={:.2f}, Frozen={:.2f}": "Account funds update (every 5 minutes): AccountID={}, Balance={:.2f}, Available={:.2f}, Frozen={:.2f}",
    "持仓更新: 代码={}, 方向={}, 数量={}, 昨仓={}, 冻结={}, 均价={:.3f}": "Position update: code={}, direction={}, quantity={}, yesterday's position={}, frozen={}, average price={:.3f}",
    "事件处理器: 将事件放入发布队列: Topic={}": "Event handler: put the event into the publishing queue: Topic={}",
    "处理 VNPY 事件 {} (类型: {}) 并准备放入队列时出错: {}": "Error processing VNPY event {} (type: {}) and preparing to queue: {}",
    "发布线程启动 (批处理模式)。": "Publishing thread started (batch mode).",
    "发布线程: 当前发布队列大小 (self._publish_queue): {}": "Publishing thread: Current publishing queue size (self._publish_queue): {}",
    "发布线程: 处理的 VNPY 事件总数 (计数器): {}": "Posting thread: Total VNPY events processed (counter): {}",
    "发布线程：MAIN PUB socket 不可用或已关闭。本批次消息将被丢弃。": "Publishing thread: MAIN PUB socket is unavailable or closed. This batch of messages will be discarded.",
    "发布线程：检测到 MAIN PUB socket 可用。": "Publishing thread: Detected that the MAIN PUB socket is available.",
    "订单执行网关服务(RPC模式)准备就绪。按 Ctrl+C 停止主程序。": "The order execution gateway service (RPC mode) is ready. Press Ctrl+C to stop the main program.",
    "发布线程: [SEND HWM/Again] ZMQ发送缓冲区满或无订阅者，消息被丢弃. Topic: {}. 当前队列大小: {}": "Publishing thread: [SEND HWM/Again] ZMQ send buffer is full or there is no subscriber, the message is discarded. Topic: {}. Current queue size: {}",
    "发布线程: [SEND ZMQERR] ZMQ 发送错误: {}. Topic: {}": "Publishing thread: [SEND ZMQERR] ZMQ send error: {}. Topic: {}",
    "发布线程: [SEND GENERR] 未知发送错误: {}. Topic: {}": "Posting thread: [SEND GENERR] Unknown send error: {}. Topic: {}",
    "发布线程: CRITICAL! 调用 task_done 时出错: {}": "Posting thread: CRITICAL! Error calling task_done: {}",
    "发布线程停止。": "The publishing thread stops.",
    "心跳线程启动 (间隔: {}s, 主题: {})。": "Heartbeat thread started (interval: {}s, topic: {}).",
    "发送心跳: Timestamp={}": "Send heartbeat: Timestamp={}",
    "发送心跳时遇到 ZMQ EAGAIN (缓冲区可能已满？)": "Encountered ZMQ EAGAIN when sending heartbeat (buffer full perhaps?)",
    "发送心跳时出错: {}": "Error sending heartbeat: {}",
    "心跳线程：MAIN PUB socket 不可用或已关闭，无法发送心跳。": "Heartbeat thread: The MAIN PUB socket is unavailable or closed, and the heartbeat cannot be sent.",
    "心跳线程停止。": "The heartbeat thread stops.",
    "订单执行网关服务(RPC模式) for [{}] 已在运行中。": "Order Execution Gateway Service (RPC Mode) for [{}] is already running.",
    "启动订单执行网关服务(RPC模式) for [{}]...": "Start order execution gateway service (RPC mode) for [{}]...",
    "错误：未能从配置中获取订单网关 REP 或 PUB 地址。服务无法启动。": "Error: Failed to get Order Gateway REP or PUB address from configuration. Service failed to start.",
    "RPC 服务器已启动。 REP: {}, PUB: {}": "RPC server started. REP: {}, PUB: {}",
    "为 MAIN PUB socket (_socket_pub) 设置了 ZMQ.SNDHWM 选项: {}": "The ZMQ.SNDHWM option is set for the MAIN PUB socket (_socket_pub): {}",
    "为 MAIN PUB socket (_socket_pub) 设置 ZMQ 选项时出错: {}": "Error setting ZMQ options for MAIN PUB socket (_socket_pub): {}",
    "无法设置 ZMQ 选项：RpcServer 未能成功创建 _socket_pub。": "Unable to set ZMQ options: RpcServer failed to successfully create _socket_pub.",
    "启动 RPC 服务器时失败: {}": "Failed to start RPC server: {}",
    "发布线程已启动。": "The publishing thread has been started.",
    "发布线程似乎已在运行。": "The posting thread appears to already be running.",
    "心跳线程已启动。": "The heartbeat thread has been started.",
    "心跳线程似乎已在运行。": "The heartbeat thread appears to already be running.",
    "事件引擎已启动，并注册了事件处理器。": "The event engine has been started and event handlers have been registered.",
    "启动或注册事件引擎时出错: {}": "Error starting or registering event engine: {}",
    "CTP 连接配置 (Env: {}): UserID={}, BrokerID={}, TD={}": "CTP connection configuration (Env: {}): UserID={}, BrokerID={}, TD={}",
    "CTP 连接请求已发送。": "CTP connection request sent.",
    "连接 CTP 交易网关时发生严重错误 (Env: {}): {}": "A critical error occurred while connecting to the CTP Trading Gateway (Env: {}): {}",
    "订单执行网关服务(RPC模式) for [{}] 启动完成。": "Order execution gateway service (RPC mode) for [{}] started successfully.",
    "停止订单执行网关服务(RPC模式)...": "Stop order execution gateway service (RPC mode)...",
    "正在停止心跳线程...": "Stopping heartbeat thread...",
    "无法正常停止心跳线程。": "Unable to stop the heartbeat thread gracefully.",
    "心跳线程已停止。": "The heartbeat thread has stopped.",
    "正在停止发布线程...": "Stopping posting thread...",
    "无法正常停止发布线程。": "Unable to stop publishing thread gracefully.",
    "发布线程已停止。": "The publishing thread has stopped.",
    "事件引擎已停止。": "The event engine has stopped.",
    "CTP 交易网关已关闭。": "The CTP Trading Gateway is down.",
    "RPC 服务器已停止。": "The RPC server is stopped.",
    "停止 RPC 服务器时出错: {}": "Error stopping RPC server: {}",
    "订单执行网关服务(RPC模式) for [{}] 已停止。": "The Order Execution Gateway Service (RPC Mode) for [{}] has stopped.",
    "策略引擎连接行情发布器: {}": "Strategy engine connects to market publisher: {}",
    "策略引擎连接回报发布器: {}": "Strategy engine connection report publisher: {}",
    "策略引擎连接订单网关 REQ Socket (RPC): {}": "Strategy engine connects to order gateway REQ Socket (RPC): {}",
    "开始加载策略...": "Starting to load strategy...",
    "策略名称 '{}' 重复，跳过加载。": "Strategy name '{}' is duplicated, skipping loading.",
    "策略 '{}' 的 vt_symbol '{}' 格式无效，应为 'symbol.exchange'。跳过加载。": "Invalid format for vt_symbol '{}' for Strategy '{}', expected 'symbol.exchange'. Skipping loading.",
    "类 '{}' 不是 BaseLiveStrategy 的子类。跳过加载策略 '{}'。": "Class '{}' is not a subclass of BaseLiveStrategy. Skipping loading strategy '{}'.",
    "策略 '{}' (类: {}, 合约: {}) 加载成功。": "Strategy '{}' (class: {}, contract: {}) loaded successfully.",
    "导入策略类 '{}' 失败。跳过加载策略 '{}'。": "Importing Strategy class '{}' failed. Skipping loading Strategy '{}'.",
    "在模块 '{}' 中未找到策略类 '{}'。跳过加载策略 '{}'。": "Strategy class '{}' not found in module '{}'. Skipping loading Strategy '{}'.",
    "策略 '{}' 的配置缺少必要键: {}。跳过加载。": "Configuration for strategy '{}' is missing required key: {}. Skipping loading.",
    "加载策略 '{}' 时发生未知错误: {}": "An unknown error occurred while loading strategy '{}': {}",
    "策略加载完成。共加载 {} 个策略实例，映射到 {} 个合约。": "Strategy loading completed. A total of {} strategy instances were loaded, mapped to {} contracts.",
    "错误：未成功加载任何策略。引擎无法运行。": "Error: No strategies were loaded successfully. The engine cannot run.",
    "没有加载任何策略或策略未指定合约，将不订阅任何特定合约数据！": "If no strategy is loaded or the strategy does not specify a contract, no specific contract data will be subscribed!",
    "订阅特定合约主题: {}, {}": "Subscribe to a specific contract topic: {}, {}",
    "订阅通用主题前缀: {}*, {}*, {}*, {}, {}": "Subscribe to common topic prefix: {}*, {}*, {}*, {}, {}",
    "最终订阅 {} 个主题/前缀。": "Finally subscribed to {} topics/prefixes.",
    "最终 SUB 套接字订阅列表：{}": "Final SUB socket subscription list:{}",
    "正在初始化所有已加载的策略...": "Initializing all loaded strategies...",
    "所有策略初始化完成。": "All strategies are initialized.",
    "为 SUB socket 设置了 ZMQ.RCVHWM: {}": "Set ZMQ.RCVHWM for SUB socket: {}",
    "为 SUB socket 设置 ZMQ.RCVHWM 时出错: {}": "Error setting ZMQ.RCVHWM for SUB socket: {}",
    "_send_rpc_request 不应在回测模式下调用！": "_send_rpc_request should not be called in backtesting mode!",
    "引擎未运行，无法发送 RPC 请求。": "The engine is not running and cannot send RPC requests.",
    "订单请求者 (REQ) 套接字对于 RPC 不可用或已关闭。": "The order requester (REQ) socket is unavailable for RPC or has been closed.",
    "{} 正在发送请求...": "{} Sending request...",
    "{} 收到成功回复。": "{} Received a successful response.",
    "与订单执行网关的连接已恢复 (RPC Ping). 设置初始连接时间。": "Connection to the order execution gateway has been restored (RPC Ping). Set initial connection time.",
    "{} RPC 调用失败 (网关回复): {}": "{} RPC call failed (gateway reply): {}",
    "{} 收到来自订单网关的意外回复格式: {}": "{} Received unexpected response format from Order Gateway: {}",
    "{} 请求超时 ({}ms).": "{} Request timeout ({}ms).",
    "与订单执行网关的连接丢失 (RPC Timeout after {} attempts)!": "Connection to order execution gateway lost (RPC Timeout after {} attempts)!",
    "{} 发送或接收 RPC 时 ZMQ 错误: {}": "{} ZMQ error when sending or receiving RPC: {}",
    "与订单执行网关的连接丢失 (ZMQ Error {})!": "Connection to the Order Execution Gateway lost (ZMQ Error {})!",
    "{} Msgpack反序列化 RPC 回复时出错: {}": "{} Msgpack error while deserializing RPC reply: {}",
    "{} 处理 RPC 时发生未知错误：{}": "{} An unknown error occurred while processing the RPC:{}",
    "与订单执行网关的连接可能丢失 (未知 RPC 错误)!": "The connection to the order execution gateway may be lost (Unknown RPC Error)!",
    "(Strategy) 检查交易时间时出错: {}": "(Strategy) Error checking transaction time: {}",
    "{} 正在发送...": "{} Sending...",
    "已成功从 OrderGW 接收 PONG。": "Successfully received PONG from OrderGW.",
    "{} 收到 PING 的意外结果：{}": "{} Received unexpected result from PING:{}",
    "与订单执行网关的连接可能存在问题 (Unexpected PING result)! ": "There may be a problem with the connection to the order execution gateway (Unexpected PING result)!",
    "在回测模式下不应直接调用 StrategyEngine.send_limit_order。": "StrategyEngine.send_limit_order should not be called directly in backtesting mode.",
    "无法发送订单 ({} {} {} @ {}): 与订单执行网关失去连接。": "Unable to send order ({} {} {} @ {}): Lost connection with order execution gateway.",
    "订单发送冷却中 ({}): 距离上次发送不足 {} 秒。": "Order sending is in cooldown ({}): Less than {} seconds have passed since the last sending.",
    "准备发送限价单: {}.{} {} {} @ {} Offset: {}": "Ready to send limit order: {}.{} {} {} @ {} Offset: {}",
    "send_limit_order: Calling _send_rpc_request with tuple: {}": "send_limit_order: Calling _send_rpc_request with tuple: {}",
    "从订单网关收到的 vt_orderid 不是字符串: {} (类型: {})。订单可能已发送但ID无效。": "The vt_orderid received from the order gateway is not a string: {} (type: {}). The order may have been sent but with an invalid ID.",
    "订单发送成功 (RPC确认): {}, VT_OrderID: {}": "Order sent successfully (RPC confirmation): {}, VT_OrderID: {}",
    "订单发送失败 (RPC调用未成功或网关返回错误): {}": "Order sending failed (RPC call failed or gateway returned an error): {}",
    "在回测模式下不应直接调用 StrategyEngine.cancel_limit_order。": "StrategyEngine.cancel_limit_order should not be called directly in backtest mode.",
    "无法发送撤单指令 ({}): 与订单执行网关失去连接。": "Unable to send order cancellation instruction ({}): Lost connection with order execution gateway.",
    "尝试发送无效 vt_orderid ({}) 的撤单请求。": "Attempted to send a cancellation request with an invalid vt_orderid ({}).",
    "准备发送撤单指令: {}": "Prepare to send order cancellation instruction: {}",
    "撤单指令发送成功 (RPC确认): {}. 回复: {}": "The order cancellation instruction was sent successfully (RPC confirmation): {}. Reply: {}",
    "撤单指令发送失败 (RPC调用未成功): {}": "Failed to send the order cancellation instruction (RPC call failed): {}",
    "撤单指令发送失败 (网关回复错误或格式无效): {}. 回复: {}": "Failed to send the order cancellation instruction (gateway reply error or invalid format): {}. Reply: {}",
    "策略引擎已在运行中。": "The strategy engine is already running.",
    "没有加载任何策略，引擎无法启动。": "No strategies are loaded and the engine cannot start.",
    "启动策略引擎服务...": "Starting strategy engine service...",
    "正在启动所有已加载的策略...": "Starting all loaded strategies...",
    "所有策略已启动。": "All strategies are activated.",
    "策略引擎服务已启动，开始监听消息...": "The strategy engine service has been started and started listening for messages...",
    "启动后立即尝试 Ping 订单网关以建立初始连接状态...": "Immediately after startup, try to ping the order gateway to establish initial connection status...",
    "StrategyEngine Recv 循环：已接收部分。主题字节数：{!r} (len={})，数据字节长度：{}": "StrategyEngine Recv Loop: Received parts. Topic Bytes: {!r} (len={}), Data Bytes Len: {}",
    "StrategyEngine Recv 循环：收到意外的多部分计数：{}。部分：{}": "StrategyEngine Recv Loop: Received unexpected multipart count: {}. Parts: {}",
    "StrategyEngine Recv 循环：zmq.Again 在 recv_multipart 上捕获（轮询后应该很少见）": "StrategyEngine Recv Loop: zmq.Again caught on recv_multipart (should be rare after poll)",
    "StrategyEngine Recv Loop：recv_multipart 期间出错：{}": "StrategyEngine Recv Loop: Error during recv_multipart: {}",
    "解码主题：'{}'": "Decoded topic: '{}'",
    "Msgpack 解码：对象类型='{}'，模块='{}'": "Msgpack decoded: Object Type='{}', Module='{}'",
    "主题 {} 上的 TickData 对象缺少'vt_symbol'属性。": "TickData object on topic {} is missing 'vt_symbol' attribute.",
    "已成功根据主题 {} 的字典构建 Tick 数据": "Successfully reconstructed TickData from dict for topic {}",
    "从字典重建的 TickData 对象缺少'vt_symbol'。主题：{}": "Reconstructed TickData object from dict is missing 'vt_symbol'. Topic: {}",
    "无法根据在 tick 主题 {} 上收到的字典重建 TickData。字典：{}": "Failed to reconstruct TickData from dict received on tick topic {}. Dict: {}",
    "在 tick 主题 {} 上接收到非 TickData/非 dict 对象：Type='{}'，Module='{}'": "Received non-TickData/non-dict object on tick topic {}: Type='{}', Module='{}'",
    "已成功根据主题 {} 的字典重建 OrderData": "Successfully reconstructed OrderData from dict for topic {}",
    "无法根据订单主题 {} 收到的字典重建订单数据。字典：{}": "Failed to reconstruct OrderData from dict received on order topic {}. Dict: {}",
    "在订单主题 {} 上收到非 OrderData/非 dict 对象：{type()}": "Received non-OrderData/non-dict object on order topic {}: {type()}",
    "已成功根据主题 {} 的字典重建 TradeData": "Successfully reconstructed TradeData from dict for topic {}",
    "无法根据交易主题 {} 收到的字典重建 TradeData。字典：{}": "Failed to reconstruct TradeData from dict received on trade topic {}. Dict: {}",
    "收到有关贸易主题 {} 的非 TradeData/非 dict 对象：{}": "Received non-TradeData/non-dict object on trade topic {}: {}",
    "收到非 AccountData/非 dict 数据，或帐户主题 {} 重建失败。原始类型：{}": "Received non-AccountData/non-dict or failed reconstruction on account topic {}. Original Type: {}",
    "日志主题 {} 收到非日志数据/非字典，或重建失败。原始类型：{}": "Received non-LogData/non-dict or failed reconstruction on log topic {}. Original Type: {}",
    "在心跳主题上接收到非字典对象：{}": "Received non-dict object on heartbeat topic: {}",
    "未知的消息主题: {}": "Unknown message subject: {}",
    "Msgpack 解码错误: {}. Topic: '{}', Data (first 100 bytes): {!r}": "Msgpack decoding error: {}. Topic: '{}', Data (first 100 bytes): {!r}",
    "处理订阅消息时出错 (Topic: {}): {}": "Error processing subscription message (Topic: {}): {}",
    "订单网关心跳超时 ...": "Order network concern jump timeout ...",
    "[交易时段内] 行情数据可能中断或延迟! 超时合约: {}": "[During trading hours] Market data may be interrupted or delayed! Timeout contract: {}",
    "所有监控合约的行情数据流已恢复。": "The market data flow of all monitored contracts has been restored.",
    "ZMQ 错误 ({}: {}) 发生在服务停止期间，正常退出。": "ZMQ error ({}: {}) occurred during service stop, exiting normally.",
    "主循环中意外的 ZMQ 错误: {}": "Unexpected ZMQ error in main loop: {}",
    "策略引擎检测到中断信号，开始停止...": "The strategy engine detected an interrupt signal and started to stop...",
    "策略引擎主循环发生未知错误：{}": "An unknown error occurred in the strategy engine main loop: {}",
    "策略引擎主循环结束。": "The strategy engine main loop ends.",
    "process_tick：为 vt_symbol“{}”调用策略“{}”on_tick。": "process_tick: Calling strategy '{}' on_tick for vt_symbol '{}'.",
    "策略 {} 在 on_tick 处理 {} 时出错: {}": "Strategy {} encountered an error in on_tick processing {}: {}",
    "收到的订单对象没有 vt_symbol 或 vt_orderid：{}": "Order object received without vt_symbol or vt_orderid: {}",
    "process_order 更新：已收到订单 ID={} 状态={}": "process_order_update: Received OrderID={} Status={}",
    "策略 {} 在 on_order 处理 {} 时出错: {}": "Strategy {} encountered an error while processing {} in on_order: {}",
    "忽略重复交易事件：{}": "Ignoring duplicate trade event: {}",
    "收到的交易更新没有 vt_tradeid，无法检查重复。": "Trade update received without vt_tradeid, cannot check for duplicates.",
    "收到的交易更新不包含 vt_symbol: {}": "Trade update received without vt_symbol: {}",
    "收到成交回报: {} OrderID: {} TradeID: {} Offset: {} Price: {} Vol: {}": "Received transaction report: {} OrderID: {} TradeID: {} Offset: {} Price: {} Vol: {}",
    "策略 {} 在 on_trade 处理 {} 时出错: {}": "Strategy {} encountered an error while processing {} in on_trade: {}",
    "process_account_update：已收到 AccountID 的更新：'{}'": "process_account_update: Received update for AccountID: '{}'",
    "策略 {} 在 on_account 处理时出错: {}": "Strategy {} had an error in on_account processing: {}",
    "收到的心跳格式无效：{}": "Received invalid format for heartbeat: {}",
    "（调试 HB 接收）TS={}，NOW={}": "(DEBUG HB Recv) TS={}, NOW={}",
    "接收到订单网关心跳，标记为已连接。设置初始连接时间。": "Receive order network connection jump, mark as connected. Set initial connection time.",
    "收到过期的 OrderGW 心跳 (Timestamp: {}, Now: {}) - 可能存在时钟不同步或延迟。": "Received expired OrderGW heartbeat (Timestamp: {}, Now: {}) - there may be clock desync or delay.",
    "处理 OrderGW 心跳消息时出错: {}": "Error processing OrderGW heartbeat message: {}",
    "StrategyEngine.stop() 被调用，但引擎未在运行或已被停止。": "StrategyEngine.stop() was called, but the engine was not running or was already stopped.",
    "开始停止策略引擎服务...": "Starting to stop strategy engine service...",
    "正在停止所有策略...": "Stopping all strategies...",
    "停止策略 {} 时出错: {}": "Error stopping strategy {}: {}",
    "所有策略已停止。": "All strategies are stopped.",
    "正在关闭策略引擎 ZMQ Sockets...": "Shutting down strategy engine ZMQ Sockets...",
    "正在关闭 Socket: {}...": "Closing Socket: {}...",
    "Socket {} 已关闭。": "Socket {} is closed.",
    "关闭策略引擎 Socket {} 时出错: {}": "Error closing Strategy Engine Socket {}: {}",
    "策略引擎 ZMQ Sockets 已关闭。": "Strategy Engine ZMQ Sockets closed.",
    "正在终止策略引擎的 ZMQ Context (from stop method)...": "Terminating the Strategy Engine's ZMQ Context (from stop method)...",
    "策略引擎的 ZMQ Context 已成功终止 (from stop method)。": "The ZMQ Context of the strategy engine has been terminated successfully (from stop method).",
    "终止策略引擎的 ZMQ Context 时发生 ZMQ 错误: {}": "A ZMQ error occurred while terminating the ZMQ Context for the Strategy Engine: {}",
    "终止策略引擎的 ZMQ Context 时发生未知错误: {}": "An unknown error occurred while terminating the ZMQ Context for the strategy engine: {}",
    "策略引擎的 ZMQ Context 未找到或已关闭 (from stop method)，跳过终止。": "The ZMQ Context for the strategy engine was not found or has been closed (from stop method), skipping termination.",
    "策略引擎 CTP 环境：{}": "Strategy Engine CTP environment: {}",
    "正在初始化策略引擎...": "Initializing strategy engine...",
    "错误：未能从 global_config.yaml 中获取必要的 ZMQ 地址。请检查配置。": "Error: Failed to get necessary ZMQ addresses from global_config.yaml. Please check configuration.",
    "错误：未能加载策略配置。请检查策略配置是否存在且格式正确。": "Error: Failed to load strategy configuration. Please check that the strategy configuration exists and is in the correct format.",
    "连接行情发布器地址: {}": "Connect to the market publisher address: {}",
    "连接订单网关请求地址: {}": "Connection order gateway request address: {}",
    "连接订单回报发布器地址: {}": "Connect to order return publisher address: {}",
    "加载的策略配置: {}": "Loaded strategy configuration: {}",
    "初始化策略引擎时发生严重错误: {}": "A fatal error occurred while initializing strategy engine: {}",
    "未能成功加载任何策略。引擎将退出。": "Failed to load any Strategies successfully. The engine will exit.",
    "尝试启动策略引擎...": "Trying to start strategy engine...",
    "主程序检测到 Ctrl+C，正在停止引擎...": "Main program detected Ctrl+C, stopping engine...",
    "策略引擎运行时发生意外错误: {}": "An unexpected error occurred while running the strategy engine: {}",
    "执行最终停止清理...": "Performing final stop cleanup...",
    "策略引擎运行结束。": "The strategy engine has finished running."

}