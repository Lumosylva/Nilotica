[project]
name = "nilotica_dev"
dynamic = ["version"]
description = "一个基于vnpy的量化系统(Based vnpy quant trading system.)"
license = { file = "LICENSE.txt" }
authors = [{ name = "Donny", email = "donnymoving@gmail.com" }]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Office/Business :: Financial :: Investment",
    "Natural Language :: Chinese (Simplified)",
    "Typing :: Typed",
]
requires-python = ">=3.10,<3.13"
dependencies = [
    "deap>=1.4.2",
    "msgpack==1.1.0",
    "numpy>=2.2.3",
    "peewee==3.17.9",
    "plotly>=6.0.0",
    "pybind11>=2.9.0",
    "pybind11-stubgen>=2.5.3",
    "pyqtgraph>=0.13.7",
    "pyside6>=6.8.2.1",
    "pyzmq>=26.3.0",
    "qdarkstyle>=3.2.3",
    "seaborn==0.13.2",
    "tqdm>=4.67.1",
    "loguru>=0.7.3",
    "nbformat>=5.10.4",
    "tushare==1.4.21",
    "tzlocal>=5.3.1",
    "pandas>=2.2.3",
    "hatch>=1.14.1",
    "setuptools>=78.1.0",
    "ta-lib>=0.6.3",
    "tzdata>=2025.2",
    "pathlib>=1.0.1",
    "pip>=25.0.1",
    "hatchling>=1.27.0",
    "babel>=2.17.0",
    "polars>=1.26.0",
    "websocket-client>=1.8.0",
    "importlib-metadata>=8.6.1",
]

keywords = ["quant", "quantitative", "trading", "nilotica", "investment"]

[project.urls]
"Homepage" = "https://github.com/Nilotica/nilotica_dev"
"Documentation" = "https://github.com/Nilotica/nilotica_dev/README.md"
"Repository" = "https://github.com/Nilotica/nilotica_dev.git"
"Issues" = "https://github.com/Nilotica/nilotica_dev/issues"
"Changes" = "https://github.com/Nilotica/nilotica_dev/CHANGELOG.md"
"Source" = "https://github.com/Nilotica/nilotica_dev"

[build-system]
requires = [
    "hatchling>=1.27.0",
    "babel>=2.17.0",
    "pybind11>=2.13.6",
    "pybind11-stubgen>=2.5.3",
    "setuptools",
    "numpy",
    "ta-lib>=0.6.3",
    "tzdata>=2025.2",
]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "__init__.py"
pattern = "__version__ = ['\"](?P<version>[^'\"]+)['\"]"

[tool.hatch.build.hooks.custom]
path = "hatch_build.py"
#path = "hatch_build_tts.py" # for tts

[tool.hatch.build.targets.sdist]
include = [
    "config*",
    "logger*",
    "structlog*",
    "utils*",
    "vnpy*",
    "vnpy_ctp*",
    "vnpy_tts*",
    "vnpy_websocket*",
    "zmq_services*",
    "__init__.py",
    "build.bat",
    "build.sh",
    "CHANGELOG.md",
    "hatch_build.py",
    "LICENSE.txt",
    "pyproject.toml",
    "README.md",
    "README_EN.md",
    "run.bat",
    "vnpy_ctp/api/**/*.h",
    "vnpy_ctp/api/**/*.cpp",
    "vnpy_ctp/api/**/*.lib",
    "vnpy_ctp/api/**/*.a",
    "vnpy_tts/api/**/*.h",
    "vnpy_tts/api/**/*.cpp",
    "vnpy_tts/api/**/*.lib",
    "vnpy_tts/api/**/*.a",
]

[tool.hatch.build.targets.wheel]
packages = [
    "config",
    "logger",
    "structlog",
    "utils",
    "vnpy",
    "vnpy_ctp",
    "vnpy_tts",
    "vnpy_websocket",
    "zmq_services",
]

[project.optional-dependencies]
dev = [
    "hatchling>=1.27.0",
    "babel>=2.17.0",
    "scipy>=1.15.2",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "mypy>=1.8.0",
    "flake8>=7.0.0",
    "pre-commit>=3.6.0",
    "isort>=5.13.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
]

[tool.hatch.envs.default]
dependencies = [
  "nilotica_dev[dev,docs] @ ."
]
scripts.test = "pytest {args}"
scripts.lint = [
  "black .",
  "isort .",
  "mypy .",
  "flake8 .",
]
scripts.format = [
  "black .",
  "isort .",
]
scripts.clean = "rm -rf .pytest_cache .mypy_cache .ruff_cache dist build *.egg-info"
scripts.build = "hatch build"

[tool.hatch.envs.test]
dependencies = [
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
  "nilotica_dev @ ."
]
scripts.run = "pytest {args:tests}"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.12.0",
  "mypy>=1.8.0",
  "flake8>=7.0.0",
  "isort>=5.13.0",
]
scripts.style = "black --check --diff ."
scripts.typing = "mypy ."
scripts.lint = [
    "style",
    "typing",
    "flake8 ."
]
scripts.format = [
  "black .",
  "isort .",
]

[tool.ruff]
target-version = "py312"
output-format = "full"

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "E",  # pycodestyle error
    "F",  # pyflakes
    "UP",  # pyupgrade
    "W",  # pycodestyle warning
]
ignore = ["E501"]

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=nilotica_dev --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["nilotica_dev"]
omit = ["tests/*", "hatch_build_tts.py", "hatch_build.py", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
