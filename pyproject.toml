[project]
name = "nilotica_dev"
version = "0.1.0"
description = "一个基于vnpy的量化系统(Based vnpy quant trading system.)"
license = { file = "LICENSE.txt" }
authors = [{ name = "Donny", email = "donnymoving@gmail.com" }]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Office/Business :: Financial :: Investment",
    "Natural Language :: Chinese (Simplified)",
    "Typing :: Typed",
]
requires-python = ">=3.10,<3.13"
dependencies = [
    "deap==1.4.1",
    "msgpack==1.1.0",
    "numpy==1.26.4",
    "peewee==3.17.9",
    "plotly==5.20.0",
    "pybind11>=2.13.6",
    "pybind11-stubgen>=2.5.3",
    "pyqtgraph==0.13.4",
    "pyside6==6.3.0",
    "pyzmq==25.1.2",
    "qdarkstyle==3.2.3",
    "seaborn==0.13.2",
    "tqdm==4.66.3",
    "tushare==1.4.21",
    "tzlocal==5.2",
    "pandas>=2.2.3",
    "hatch>=1.14.1",
    "setuptools>=78.1.0",
    "TA-Lib",
    "tzdata>=2025.2",
    "pathlib>=1.0.1",
    "pip>=25.0.1",
    "hatchling>=1.27.0",
]

keywords = ["quant", "quantitative", "trading", "nilotica", "investment"]

[project.urls]
"Homepage" = "https://github.com/Nilotica/nilotica_dev"
"Documentation" = "https://github.com/Nilotica/nilotica_dev/README.md"
"Repository" = "https://github.com/Nilotica/nilotica_dev.git"
"Issues" = "https://github.com/Nilotica/nilotica_dev/issues"
"Changelog" = "https://github.com/Nilotica/nilotica_dev/CHANGELOG.md"
"Source" = "https://github.com/Nilotica/nilotica_dev"

[build-system]
requires = [
    "hatchling",
    "pybind11>=2.13.6",
    "pybind11-stubgen>=2.5.3",
    "setuptools",
    "numpy",
    "TA-Lib",
    "tzdata>=2025.2",
]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "nilotica_dev/__init__.py"

[tool.hatch.build.hooks.custom]
path = "hatch_build.py"

[tool.hatch.build.targets.sdist]
include = [
    "/utils",
    "/vnpy",
    "/vnpy_ctp",
    "/vnpy_rpcservice",
    "/zmq_services",
    "/config",
    "/README.md",
    "/LICENSE.txt",
    "/pyproject.toml",
    "/hatch_build.py",
    "/vnpy_ctp/api/**/*.h",
    "/vnpy_ctp/api/**/*.cpp",
    "/vnpy_ctp/api/**/*.lib",
    "/vnpy_ctp/api/**/*.a",
]

[tool.hatch.build.targets.wheel]
packages = [
    "utils",
    "vnpy",
    "vnpy_ctp",
    "vnpy_rpcservice",
    "zmq_services",
    "config",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "mypy>=1.8.0",
    "flake8>=7.0.0",
    "pre-commit>=3.6.0",
    "isort>=5.13.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
]

[tool.hatch.envs.default]
dependencies = [
  "nilotica_dev[dev,docs] @ ."
]
scripts.test = "pytest {args}"
scripts.lint = [
  "black .",
  "isort .",
  "mypy .",
  "flake8 .",
]
scripts.format = [
  "black .",
  "isort .",
]
scripts.clean = "rm -rf .pytest_cache .mypy_cache .ruff_cache dist build *.egg-info"
scripts.build = "hatch build"

[tool.hatch.envs.test]
dependencies = [
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
  "nilotica_dev @ ."
]
scripts.run = "pytest {args:tests}"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.12.0",
  "mypy>=1.8.0",
  "flake8>=7.0.0",
  "isort>=5.13.0",
]
scripts.style = "black --check --diff ."
scripts.typing = "mypy ."
scripts.lint = [
    "style",
    "typing",
    "flake8 ."
]
scripts.format = [
  "black .",
  "isort .",
]

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=nilotica_dev --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["nilotica_dev"]
omit = ["tests/*", "setup.py", "hatch_build.py", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
